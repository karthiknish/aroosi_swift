rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if isPublicProfile(userId);
    }
    
    // Profiles collection - public profiles can be read by authenticated users
    match /profiles/{profileId} {
      allow read: if request.auth != null && isValidUser();
      allow write: if request.auth != null && request.auth.uid == profileId;
      allow create: if request.auth != null && request.auth.uid == profileId && isValidProfileData();
    }
    
    // Conversations collection - only participants can access
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && 
        isParticipantInConversation(request.auth.uid, conversationId);
      allow create: if request.auth != null && 
        isValidConversationCreate(request.auth.uid, request.resource.data);
    }
    
    // Messages subcollection - only participants can access their conversation's messages
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, write: if request.auth != null && 
        isParticipantInConversation(request.auth.uid, conversationId);
      allow create: if request.auth != null && 
        isParticipantInConversation(request.auth.uid, conversationId) &&
        isValidMessageCreate(request.resource.data);
    }
    
    // Matches collection - only users involved can read/write
    match /matches/{matchId} {
      allow read: if request.auth != null && isMatchParticipant(resource.data, request.auth.uid);
      allow create: if request.auth != null && isMatchParticipant(request.resource.data, request.auth.uid);
      allow update: if request.auth != null && isMatchParticipant(resource.data, request.auth.uid) && matchParticipantsImmutable();
      allow delete: if request.auth != null && isMatchParticipant(resource.data, request.auth.uid);
    }
    
    // Interests collection - senders/receivers can access their interests
    match /interests/{interestId} {
      allow read: if request.auth != null && isInterestParticipant(resource.data, request.auth.uid);
      allow create: if request.auth != null && interestCreateAllowed();
      allow update: if request.auth != null && interestUpdateAllowed();
      allow delete: if request.auth != null && resource.data.fromUserId == request.auth.uid;
    }
    
    // Reports collection - users can create reports, admins can read
    match /reports/{reportId} {
      allow create: if request.auth != null && 
        request.resource.data.reporterId == request.auth.uid &&
        isValidReportCreate(request.resource.data);
      allow read: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Blocks collection - users can manage their own blocks
    match /blocks/{blockId} {
      allow read: if request.auth != null && resource.data.blockerId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.blockerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.blockerId == request.auth.uid;
    }
    
    // Shortlist subcollection - users can manage their own shortlist
    match /users/{userId}/shortlist/{shortlistedUserId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Icebreaker questions - read-only for all authenticated users
    match /icebreaker_questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if false; // Server only - questions uploaded via admin script
    }

    // Icebreaker answers - users can read/write their own answers
    match /icebreaker_answers/{answerId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if false;
    }
    
    // Family approval requests - requesters and family members can access
    match /family_approval_requests/{requestId} {
      // Requesters can read their own sent requests
      allow read: if request.auth != null && resource.data.requesterId == request.auth.uid;
      // Family members can read requests assigned to them
      allow read: if request.auth != null && resource.data.familyMemberId == request.auth.uid;
      // Users can create requests
      allow create: if request.auth != null && 
        request.resource.data.requesterId == request.auth.uid &&
        isValidFamilyApprovalRequest(request.resource.data);
      // Requesters can update their own requests (cancel)
      allow update: if request.auth != null && 
        resource.data.requesterId == request.auth.uid &&
        request.resource.data.status == 'cancelled';
      // Family members can update requests to respond
      allow update: if request.auth != null && 
        resource.data.familyMemberId == request.auth.uid &&
        resource.data.status == 'pending' &&
        request.resource.data.status in ['approved', 'rejected'];
    }
    
    // Family members - users can manage their own family members
    match /family_members/{memberId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        isValidFamilyMember(request.resource.data);
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Compatibility responses - users can read/write their own responses
    match /compatibility_responses/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Compatibility reports - users involved can read, creator can write
    match /compatibility_reports/{reportId} {
      allow read: if request.auth != null && (
        resource.data.userId1 == request.auth.uid || 
        resource.data.userId2 == request.auth.uid
      );
      allow create: if request.auth != null && (
        request.resource.data.userId1 == request.auth.uid || 
        request.resource.data.userId2 == request.auth.uid
      );
      allow update: if request.auth != null && (
        resource.data.userId1 == request.auth.uid || 
        resource.data.userId2 == request.auth.uid
      );
      allow delete: if request.auth != null && resource.data.userId1 == request.auth.uid;
    }
    
    // Default deny for all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Helper functions

function isValidUser() {
  return request.auth != null && request.auth.token.email_verified == true;
}

function isPublicProfile(userId) {
  return exists(/databases/(default)/documents/users/$(userId)) &&
    get(/databases/(default)/documents/users/$(userId)).data.isPublic == true;
}

function isParticipantInConversation(userId, conversationId) {
  return exists(/databases/(default)/documents/conversations/$(conversationId)) &&
    userId in get(/databases/(default)/documents/conversations/$(conversationId)).data.participants;
}

function isValidConversationCreate(userId, data) {
  return userId in data.participants && 
    data.participants.size() >= 2 &&
    data.participants.size() <= 2;
}

function isValidMessageCreate(data) {
  return data.text is string && 
    data.text.size() > 0 &&
    data.text.size() <= 1000 &&
    data.fromUserId == request.auth.uid;
}

function isValidProfileData() {
  return request.resource.data.keys().hasAll(['name', 'age', 'gender']) &&
    request.resource.data.name is string &&
    request.resource.data.name.size() > 0 &&
    request.resource.data.age is int &&
    request.resource.data.age >= 18 &&
    request.resource.data.age <= 100;
}

function isValidInterestCreate(data) {
  return data.fromUserId == request.auth.uid &&
    data.fromUserId != data.toUserId &&
    data.status in ['pending', 'accepted', 'rejected'];
}

function isValidReportCreate(data) {
  return data.reporterId == request.auth.uid &&
    data.reporterId != data.reportedUserId &&
    data.reason is string &&
    data.reason.size() > 0;
}

function isAdmin(userId) {
  return exists(/databases/(default)/documents/users/$(userId)) &&
    get(/databases/(default)/documents/users/$(userId)).data.role == 'admin';
}

function isMatchParticipant(data, userId) {
  return data != null && (
    data.userId == userId || data.matchedUserId == userId
  );
}

function matchParticipantsImmutable() {
  return resource.data == null || (
    resource.data.userId == request.resource.data.userId &&
    resource.data.matchedUserId == request.resource.data.matchedUserId
  );
}

function isInterestParticipant(data, userId) {
  return data != null && (data.fromUserId == userId || data.toUserId == userId);
}

function interestCreateAllowed() {
  return request.resource.data != null &&
    request.resource.data.fromUserId == request.auth.uid &&
    request.resource.data.fromUserId != request.resource.data.toUserId &&
    isValidInterestCreate(request.resource.data);
}

function interestUpdateAllowed() {
  return resource.data != null && request.resource.data != null &&
    resource.data.fromUserId == request.resource.data.fromUserId &&
    resource.data.toUserId == request.resource.data.toUserId &&
    resource.data.toUserId == request.auth.uid &&
    request.resource.data.status in ['pending', 'accepted', 'rejected'];
}

function isValidFamilyApprovalRequest(data) {
  return data.requesterId is string &&
    data.targetUserId is string &&
    data.requesterId != data.targetUserId &&
    data.familyMemberId is string &&
    data.familyMemberName is string &&
    data.familyMemberRelation is string &&
    data.status == 'pending' &&
    data.message is string &&
    data.message.size() > 0 &&
    data.message.size() <= 1000;
}

function isValidFamilyMember(data) {
  return data.userId is string &&
    data.name is string &&
    data.name.size() > 0 &&
    data.name.size() <= 100 &&
    data.relation is string &&
    data.relation in ['father', 'mother', 'brother', 'sister', 'uncle', 'aunt', 'cousin', 'guardian', 'other'] &&
    data.canApprove is bool;
}
