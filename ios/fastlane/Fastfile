require 'base64'
require 'fileutils'

default_platform(:ios)

def load_asc_key_content
  raw = ENV['ASC_API_KEY_P8_BASE64'] || ENV['ASC_API_KEY_P8']
  return nil unless raw

  cleaned = raw.strip
  return cleaned if cleaned.empty? || cleaned.start_with?('-----BEGIN')

  Base64.decode64(cleaned)
rescue ArgumentError
  cleaned
end

platform :ios do
  desc "Upload App Store metadata (from repo)"
  lane :upload_metadata do
    app_identifier = ENV['IOS_APP_IDENTIFIER'] || 'com.aroosi.mobile'

    api_key_id = ENV['ASC_API_KEY_ID']
    issuer_id = ENV['ASC_API_KEY_ISSUER_ID']
    key_content = load_asc_key_content

    unless api_key_id && issuer_id && key_content
      UI.user_error!("ASC_API_KEY_ID, ASC_API_KEY_ISSUER_ID, and ASC_API_KEY_P8_BASE64 environment variables are required")
    end

    app_store_connect_api_key(
      key_id: api_key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      in_house: false
    )

    deliver(
      app_identifier: app_identifier,
      metadata_path: "./fastlane/metadata/ios",
      skip_screenshots: true,
      skip_binary_upload: true,
      submit_for_review: false,
      force: true,
      team_id: ENV['APPLE_TEAM_ID']
    )
  end

  desc "Deploy to TestFlight"
  lane :deploy_testflight do
    app_identifier = ENV['IOS_APP_IDENTIFIER'] || 'com.aroosi.mobile'

    api_key_id = ENV['ASC_API_KEY_ID']
    issuer_id = ENV['ASC_API_KEY_ISSUER_ID']
    key_content = load_asc_key_content

    unless api_key_id && issuer_id && key_content
      UI.user_error!("ASC_API_KEY_ID, ASC_API_KEY_ISSUER_ID, and ASC_API_KEY_P8_BASE64 environment variables are required")
    end

    app_store_connect_api_key(
      key_id: api_key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      in_house: false
    )

    # Build the app first
    build

    # Upload to TestFlight
    transporter_log_path = File.expand_path('../build/transporter.log', __dir__)
    FileUtils.mkdir_p(File.dirname(transporter_log_path))
    ENV['FASTLANE_ITUNES_TRANSPORTER_VERBOSE'] = '1'
    ENV['FASTLANE_ITUNES_TRANSPORTER_LOG'] = transporter_log_path
    pilot(
      app_identifier: app_identifier,
      ipa: "./build/Runner.ipa",
      skip_submission: true,
      skip_waiting_for_build_processing: true,
      team_id: ENV['APPLE_TEAM_ID']
    )

    UI.success("Successfully uploaded to TestFlight!")
  end

  desc "Deploy to App Store"
  lane :deploy do
    app_identifier = ENV['IOS_APP_IDENTIFIER'] || 'com.aroosi.mobile'

    api_key_id = ENV['ASC_API_KEY_ID']
    issuer_id = ENV['ASC_API_KEY_ISSUER_ID']
    key_content = load_asc_key_content

    unless api_key_id && issuer_id && key_content
      UI.user_error!("ASC_API_KEY_ID, ASC_API_KEY_ISSUER_ID, and ASC_API_KEY_P8_BASE64 environment variables are required")
    end

    app_store_connect_api_key(
      key_id: api_key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      in_house: false
    )

    # Build the app first
    build

    # Submit for review
    transporter_log_path = File.expand_path('../build/transporter.log', __dir__)
    FileUtils.mkdir_p(File.dirname(transporter_log_path))
    ENV['FASTLANE_ITUNES_TRANSPORTER_VERBOSE'] = '1'
    ENV['FASTLANE_ITUNES_TRANSPORTER_LOG'] = transporter_log_path
    deliver(
      app_identifier: app_identifier,
      ipa: "./build/Runner.ipa",
      skip_metadata: true,
      skip_screenshots: true,
      submit_for_review: true,
      automatic_release: false,
      force: true,
      precheck_include_in_app_purchases: false,
      team_id: ENV['APPLE_TEAM_ID']
    )

    UI.success("Successfully submitted for App Store review!")
  end

  desc "Build iOS app for release"
  lane :build do
    # Clean previous builds unless explicitly skipped (speeds up CI with caching)
    sh("flutter clean") unless ENV['SKIP_FLUTTER_CLEAN'] == '1'

    # Get dependencies
    sh("flutter pub get")

    # Build iOS
    sh("flutter build ios --release --no-codesign")

    profile_specifier = ENV['PROVISIONING_PROFILE_SPECIFIER']
    export_options = nil
    unless profile_specifier.to_s.strip.empty?
      export_options = {
        provisioningProfiles: {
          (ENV['IOS_APP_IDENTIFIER'] || 'com.aroosi.mobile') => profile_specifier
        }
      }
    end

    xcargs = []
    unless profile_specifier.to_s.strip.empty?
      xcargs << "PROVISIONING_PROFILE_SPECIFIER=\"#{profile_specifier}\""
      xcargs << "CODE_SIGN_STYLE=Manual"
    end

    xcargs = xcargs.join(' ').strip
    xcargs = nil if xcargs.empty?

    # Archive the app
    derived_data_path = File.expand_path('../build/DerivedData', __dir__)
    FileUtils.mkdir_p(derived_data_path)
    gym(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      output_directory: "./build",
      output_name: "Runner.ipa",
      clean: true,
      include_bitcode: false,
      include_symbols: true,
      export_method: "app-store",
      codesigning_identity: "Apple Distribution",
      export_team_id: ENV['APPLE_TEAM_ID'],
      export_options: export_options,
      derived_data_path: derived_data_path,
      xcargs: xcargs
    )

    UI.success("IPA built successfully!")
  end

  desc "Build and deploy to TestFlight"
  lane :release_testflight do
    deploy_testflight
  end

  desc "Build and deploy to App Store"
  lane :release do
    deploy
  end
end
